{"version":3,"sources":["src/models/customer.ts","src/models/restaurant.ts","src/repositories/base.ts","src/repositories/customer.ts","src/repositories/restaurant.ts","src/lib/dummyql-connector.ts","src/lib/helpers.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.4a2fbb87.js","sourceRoot":"..","sourcesContent":["export class Customer {\n  private age: number;\n\n  private name: string;\n\n  constructor(name: string, age: number) {\n    this.age = age;\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getAge() {\n    return this.age;\n  }\n}\n","export class Restaurant {\n  private name: string;\n\n  private city: string;\n\n  constructor(name: string, city: string) {\n    this.name = name;\n    this.city = city;\n  }\n}\n","import { DummyQLConnector } from '../lib/dummyql-connector';\n\nexport abstract class BaseRepository<T> {\n  constructor(private db: DummyQLConnector, private repoName: string) {\n    this.db.addTable(this.repoName);\n  }\n\n  add(item: T): boolean {\n    return this.db.create(this.repoName, item);\n  }\n\n  getAll(): Array<T> {\n    return this.db.all(this.repoName);\n  }\n\n  findBy(criteria, value): Array<T> {\n    const returnOnlyFirstOne = false;\n    return this.db.read(this.repoName, criteria, value, returnOnlyFirstOne);\n  }\n}\n","import { BaseRepository } from './base';\nimport { Customer } from '../models/customer';\n\nexport class CustomerRepository extends BaseRepository<Customer> {\n  // Here we can create db related methods of this repo\n  getOldest(): Customer {\n    return this\n      .getAll()\n      .reduce((l, e) => (e.getAge() > l.getAge() ? e : l));\n  }\n}\n","import { BaseRepository } from './base';\nimport { Restaurant } from '../models/restaurant';\n\nexport class RestaurantRepository extends BaseRepository<Restaurant> {\n  // Here we can create db related methods of this repo\n  getByCity(name: string): Array<Restaurant> {\n    return this.findBy('city', name);\n  }\n}\n","export class DummyQLConnector {\n  public database: Object;\n\n  constructor() {\n    this.database = {};\n  }\n\n  addTable(name) {\n    this.database[name] = [];\n  }\n\n  /**\n   * CRUD: Create Read Update Delete\n   */\n\n  create(tableName: string, data) {\n    this.database[tableName].push(data);\n    return true;\n  }\n\n  read(tableName, column, value, returnOnlyFirstOne = true) {\n    return returnOnlyFirstOne\n      ? this.database[tableName].find((data) => data[column] === value)\n      : this.database[tableName].filter((data) => data[column] === value);\n  }\n\n  static update() {\n    throw new Error('Method not implemented.');\n  }\n\n  static delete() {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Some extra features (!)\n   */\n\n  all(tableName) {\n    return this.database[tableName];\n  }\n\n  count(tableName) {\n    return this.database[tableName].length;\n  }\n}\n","export const log = (message: string, value: any = '') => {\n  console.log(message, value);\n  document\n    .querySelector('.logs')\n    .insertAdjacentHTML('beforeend', `<li>${message} ${value}</li>`);\n};\n","import { Customer } from './models/customer';\nimport { Restaurant } from './models/restaurant';\nimport { CustomerRepository } from './repositories/customer';\nimport { RestaurantRepository } from './repositories/restaurant';\nimport { DummyQLConnector } from './lib/dummyql-connector';\nimport { log } from './lib/helpers';\n\n/**\n * The App\n *\n * We're lazy, we'll do everything in constructor() for now\n */\n\nclass App {\n  constructor() {\n    // Connect to database\n    const db = new DummyQLConnector();\n\n    /**\n     * Use CustomerRepository\n     */\n\n    const repoCustomer = new CustomerRepository(db, 'customer');\n\n    // Call create() method from BaseRepository\n    const resultOne = repoCustomer.add(new Customer('Alice', 32));\n    log(`Customer added with ${resultOne ? 'success' : 'fail'}`);\n\n    repoCustomer.add(new Customer('Bob', 16));\n    repoCustomer.add(new Customer('Carol', 48));\n    repoCustomer.add(new Customer('Dave', 24));\n\n    // Call a specific method from CustomerRepository\n    const customerOldest = repoCustomer.getOldest();\n    log(`The oldest customer is ${customerOldest.getName()}: Age ${customerOldest.getAge()}`);\n\n    /**\n     * Use RestaurantRepository\n     */\n\n    const repoRestaurant = new RestaurantRepository(db, 'restaurant');\n\n    const resultTwo = repoRestaurant.add(new Restaurant('Ana', 'Istanbul'));\n    log(`Restaurant added with ${resultTwo ? 'success' : 'fail'}`);\n\n    repoRestaurant.add(new Restaurant('Bogazici', 'Istanbul'));\n    repoRestaurant.add(new Restaurant('Cumhuriyet', 'Ankara'));\n    repoRestaurant.add(new Restaurant('Deniz', 'Istanbul'));\n\n    const restaurantsInIstanbul = repoRestaurant.getByCity('Istanbul');\n    log('Restaurants in Istanbul:', JSON.stringify(restaurantsInIstanbul));\n  }\n}\n\n/**\n * Initialize The App\n */\n\n// eslint-disable-next-line no-new\nnew App();\n"]}